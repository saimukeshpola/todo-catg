{"version":3,"sources":["TodoListApp/TodoList.jsx","reportWebVitals.js","index.js"],"names":["createUUID","Math","random","toString","substr","LOC_KEY","TodoList","useState","JSON","parse","localStorage","getItem","todoCategories","setTodoCategories","useEffect","setItem","stringify","length","name","selectedCatg","setSelectedCatg","style","padding","display","width","map","catgItem","border","onClick","id","catg","prompt","items","find","item","todo","type","checked","completed","onChange","e","todoIterItem","todoText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAEMA,EAAa,kBAAMC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IACxDC,EAAU,iBAoJDC,EAlJE,WAAO,IAAD,EACuBC,mBAC1CC,KAAKC,MAAMC,aAAaC,QAAQN,IAAY,OAFzB,mBACdO,EADc,KACEC,EADF,KAIrBC,qBAAU,WACRJ,aAAaK,QAAQV,EAASG,KAAKQ,UAAUJ,MAC5C,CAACA,IANiB,MAOmBL,mBACtCK,EAAeK,OAAS,EAAIL,EAAe,GAAGM,KAAO,IARlC,mBAOdC,EAPc,KAOAC,EAPA,KAWrB,OACE,sBACEC,MAAO,CACLC,QAAS,QAFb,UAKE,2CACA,sBACED,MAAO,CACLE,QAAS,QAFb,UAKE,sBACEF,MAAO,CACLG,MAAO,QAFX,UAKE,6BACGZ,EAAea,KAAI,SAACC,GACnB,OACE,6BACE,wBACEL,MAAO,CACLM,OACED,EAASR,OAASC,EACd,iBACA,yBAERS,QAAS,WACPR,EAAgBM,EAASR,OAR7B,SAWGQ,EAASR,QAZLQ,EAASG,SAkBxB,wBACED,QAAS,WACP,IAAME,EAAOC,OAAO,cAChBD,IACFjB,EAAkB,GAAD,mBACZD,GADY,CAEf,CACEiB,GAAI7B,IACJkB,KAAMY,EACNE,MAAO,OAGXZ,EAAgBU,KAZtB,yBAmBF,sBACET,MAAO,CACLG,MAAO,QAFX,UAKE,8BACIL,EACEP,EAAeqB,MAAK,SAACC,GAAD,OAAUA,EAAKhB,OAASC,KAAca,MAC1D,IACFP,KAAI,SAACU,GACL,OACE,6BACE,kCACE,uBACEN,GAAIM,EAAKN,GACTO,KAAK,WACLC,QAASF,EAAKG,UACdC,SAAU,SAACC,GACT3B,EACED,EAAea,KAAI,SAACC,GAClB,OAAIA,EAASR,OAASC,EACb,2BACFO,GADL,IAEEM,MAAON,EAASM,MAAMP,KAAI,SAACgB,GACzB,OAAIA,EAAaZ,KAAOM,EAAKN,GACpB,2BACFY,GADL,IAEEH,WAAYG,EAAaH,YAGtBG,OAINf,SAKdS,EAAKjB,SA5BDiB,EAAKN,SAkCpB,wBACED,QAAS,WACP,IAAMc,EAAWX,OAAO,cACpBW,GACF7B,EACED,EAAea,KAAI,SAACC,GAClB,OAAIA,EAASR,OAASC,EACb,2BACFO,GADL,IAEEM,MAAM,GAAD,mBACAN,EAASM,OADT,CAEH,CACEH,GAAI7B,IACJkB,KAAMwB,EACNJ,WAAW,OAKZZ,OAnBjB,iCC1GKiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.05319605.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst createUUID = () => Math.random().toString(36).substr(2, 9);\nconst LOC_KEY = \"todoCategories\";\n\nconst TodoList = () => {\n  const [todoCategories, setTodoCategories] = useState(\n    JSON.parse(localStorage.getItem(LOC_KEY) || \"[]\")\n  );\n  useEffect(() => {\n    localStorage.setItem(LOC_KEY, JSON.stringify(todoCategories));\n  }, [todoCategories]);\n  const [selectedCatg, setSelectedCatg] = useState(\n    todoCategories.length > 0 ? todoCategories[0].name : \"\"\n  );\n\n  return (\n    <div\n      style={{\n        padding: \"10px\",\n      }}\n    >\n      <h2>TODO list</h2>\n      <div\n        style={{\n          display: \"flex\",\n        }}\n      >\n        <div\n          style={{\n            width: \"30vw\",\n          }}\n        >\n          <ul>\n            {todoCategories.map((catgItem) => {\n              return (\n                <li key={catgItem.id}>\n                  <button\n                    style={{\n                      border:\n                        catgItem.name === selectedCatg\n                          ? \"1px solid blue\"\n                          : \"1px solid transparent\",\n                    }}\n                    onClick={() => {\n                      setSelectedCatg(catgItem.name);\n                    }}\n                  >\n                    {catgItem.name}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n          <button\n            onClick={() => {\n              const catg = prompt(\"Enter catg\");\n              if (catg) {\n                setTodoCategories([\n                  ...todoCategories,\n                  {\n                    id: createUUID(),\n                    name: catg,\n                    items: [],\n                  },\n                ]);\n                setSelectedCatg(catg);\n              }\n            }}\n          >\n            Add Catg\n          </button>\n        </div>\n        <div\n          style={{\n            width: \"70vw\",\n          }}\n        >\n          <ul>\n            {(selectedCatg\n              ? todoCategories.find((item) => item.name === selectedCatg).items\n              : []\n            ).map((todo) => {\n              return (\n                <li key={todo.id}>\n                  <label>\n                    <input\n                      id={todo.id}\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      onChange={(e) => {\n                        setTodoCategories(\n                          todoCategories.map((catgItem) => {\n                            if (catgItem.name === selectedCatg) {\n                              return {\n                                ...catgItem,\n                                items: catgItem.items.map((todoIterItem) => {\n                                  if (todoIterItem.id === todo.id) {\n                                    return {\n                                      ...todoIterItem,\n                                      completed: !todoIterItem.completed,\n                                    };\n                                  }\n                                  return todoIterItem;\n                                }),\n                              };\n                            }\n                            return catgItem;\n                          })\n                        );\n                      }}\n                    />\n                    {todo.name}\n                  </label>\n                </li>\n              );\n            })}\n          </ul>\n          <button\n            onClick={() => {\n              const todoText = prompt(\"Enter text\");\n              if (todoText) {\n                setTodoCategories(\n                  todoCategories.map((catgItem) => {\n                    if (catgItem.name === selectedCatg) {\n                      return {\n                        ...catgItem,\n                        items: [\n                          ...catgItem.items,\n                          {\n                            id: createUUID(),\n                            name: todoText,\n                            completed: false,\n                          },\n                        ],\n                      };\n                    }\n                    return catgItem;\n                  })\n                );\n              }\n            }}\n          >\n            Add to do\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport TodoList from \"./TodoListApp/TodoList\";\nimport reportWebVitals from \"./reportWebVitals\";\nReactDOM.render(\n  <React.StrictMode>\n    <TodoList />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}